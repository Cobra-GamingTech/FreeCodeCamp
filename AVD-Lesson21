FCC says:
The next option for the CSS 'position' property is 'absolute', which locks the element in place relative to its parent container.
Unlike the 'relative' position, this removes the element from the normal flow of the document, so surrounding items ignore it. 
The CSS offset properties (top or bottom and left or right) are used to adjust the position.

One nuance with absolute positioning is that it will be locked relative to its closest positioned ancestor. 
If you forget to add a position rule to the parent item, (this is typically done using 'position: relative;'), 
the browser will keep looking up the chain and ultimately default to the body tag.

The initial code:
<style>
  #searchbar {



  }
  section {
    position: relative;
  }
</style>
<body>
  <h1>Welcome!</h1>
  <section>
    <form id="searchbar">
      <label for="search">Search:</label>
      <input type="search" id="search" name="search">
      <input type="submit" name="submit" value="Go!">
    </form>
  </section>
</body>

This task required me to lock the #searchbar' element to the top-right of it's 'section' parent by declaring its 'position'
as 'absolute'.
Give it 'top' and 'right' offsets of 50 pixels each.

This is my code:
 #searchbar {
      position: absolute;
      top: 50px;
      right: 50px;
  }

You should see your search bar move positions within the test environment
